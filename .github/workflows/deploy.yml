name: CI, Analyze, and Deploy

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: mycluster
  ECS_SERVICE: myservice

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm run test

      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=my-react-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://52.91.49.242:9000 \
            -Dsonar.login=$SONAR_TOKEN

  deploy:
    needs: build-and-analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
       
       
      - name: Ensure ECR repository exists
        run: |
         aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION \
         || aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

      - name: Ensure ECS cluster exists and is active
        run: |
         aws ecs describe-clusters --clusters $ECS_CLUSTER --region $AWS_REGION \
         | grep -q '"status": "ACTIVE"' \
         || aws ecs create-cluster --cluster-name $ECS_CLUSTER --region $AWS_REGION

         
      - name: Create ECS service (only first time)
        run: |
         aws ecs create-service \
         --cluster $ECS_CLUSTER \
         --service-name $ECS_SERVICE \
         --task-definition nginx-task \
          --desired-count 1 \
         --launch-type FARGATE \
         --network-configuration "awsvpcConfiguration={subnets=[subnet-0ff62befe5aed37e9],securityGroups=[sg-0061c8d63b949fdbc],assignPublicIp=ENABLED}" \
          --region $AWS_REGION


      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push Docker image to ECR
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image ID in the ECS task definition
        run: |
          sed "s|<IMAGE_URI>|$IMAGE_URI|g" ecs-task-def-template.json > ecs-task-def.json

      - name: Register new task definition
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy new task definition to ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEF_ARN


